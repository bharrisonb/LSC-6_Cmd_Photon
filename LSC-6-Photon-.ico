// Adapted from from https://www.circuitsathome.com/mcu/robotic-arm-inverse-kinematics-on-arduino/  
//

#include "math.h"
 
/* Servo control for LewanSoul LeArm */
 
/* Arm dimensions( mm ) */
#define BASE_HGT 89.00      //base height (from black plate base)
//#define BASE_HGT 00.00
#define HUMERUS 105.00      //shoulder-to-elbow "bone" 
#define ULNA 88.00          //elbow-to-wrist "bone" 
#define GRIPPER 118.0       //gripper wrist to tip of gripper ,when closed
#define M_PI 3.1415926
 
#define ftl(x) ((x)>=0?(long)((x)+0.5):(long)((x)-0.5))  //float to long conversion
 
/* Servo names/ Servo numbers */
/* Base servo */
#define BAS_SERVO 6
/* Shoulder Servo */
#define SHL_SERVO 5
/* Elbow Servo */
#define ELB_SERVO 4
/* Wrist servo */
#define WRI_SERVO 3 
/* Wrist rotate servo */
#define WRO_SERVO 2
/* Gripper servo */
#define GRI_SERVO 1

// Converts degrees to radians.
#define degreesToRadians(angleDegrees) (angleDegrees * M_PI / 180.0)

// Converts radians to degrees.
#define radiansToDegrees(angleRadians) (angleRadians * 180.0 / M_PI ) 
 
/* pre-calculations */

float hum_sq = HUMERUS*HUMERUS;
float uln_sq = ULNA*ULNA;


unsigned char bas_low_byte;
unsigned char bas_high_byte;
unsigned char shl_low_byte;
unsigned char shl_high_byte;
unsigned char elb_low_byte;
unsigned char elb_high_byte;
unsigned char wri_low_byte;
unsigned char wri_high_byte;

unsigned char cmd_msg[20] ;

int i ; 


 
//ServoShield servos;                       //ServoShield object
 
void setup()
{
//  servos.setbounds( BAS_SERVO, 900, 2100 );
//  servos.setbounds( SHL_SERVO, 1000, 2100 );
//  servos.setbounds( ELB_SERVO, 900, 2100 );
//  servos.setbounds( WRI_SERVO, 600, 2400 );
//  servos.setbounds( WRO_SERVO, 600, 2400 );
//  servos.setbounds( GRI_SERVO, 600, 2400 );
  /**/
//  servos.start();                         //Start the servo shield
//  servo_park();

  Serial.begin( 9600 );
  Serial1.begin( 9600 );
  Serial.println("Starting");
  delay( 1000 );
}
 
void loop()
{
    // test motions ...
 
    //zero_x();
    //line();
    circle();
    //rect() ;

 }
 
/* arm positioning routine utilizing inverse kinematics */
/* units: mm --->z is height, y is distance from base center out, x is side to side. y and z can only be positive */

void set_arm( float x, float y, float z, float grip_angle_d )
{
    // see https://goo.gl/kgrZrU for coordinate system and calcultations   
    
    float grip_angle_r =  grip_angle_d * (M_PI / 180.0) ;    //grip angle in radians for use in calculations
 
    /* Base angle and radial distance from x,y coordinates */
    float bas_angle_r = atan2( y, x );
    float bas_angle_d = bas_angle_r * (180.0 / M_PI) ;
  
    float rdist = sqrt(( x * x ) + ( y * y ));

    /* rdist is y coordinate for the arm */

    /* Grip offsets calculated based on grip angle */
  
    float grip_off_r = rdist - (( sin( grip_angle_r )) * GRIPPER);
  
    float grip_off_z = z - BASE_HGT +  (( cos( grip_angle_r )) * GRIPPER);
  
    /* elbow angle */
    float h = (sqrt((grip_off_r * grip_off_r) + (grip_off_z * grip_off_z) ) )/ 2.0 ; // note the documentation error in https://goo.gl/kgrZrU !
  
    // for debug
    
    Serial.print("grip_off_r = " );
    Serial.println(grip_off_r);    
    Serial.print("grip_off_z = " );
    Serial.println(grip_off_z);
    Serial.print("h = " );
    Serial.println(h);
    Serial.print("h / ULNA = " );
    Serial.println(h / ULNA);
  
    float elb_angle_r = asin(h/ULNA) * 2.0 ;
    float elb_angle_d = elb_angle_r *  (180.0 / M_PI);
  
    /* shoulder angle */

    float shl_angle_r = atan2(grip_off_z , grip_off_r ) +  ((M_PI  - elb_angle_r) / 2.0);
    float shl_angle_d = shl_angle_r * (180.0 / M_PI);
  
    /* wrist angle */
    float wri_angle_r = M_PI + grip_angle_r - shl_angle_r - elb_angle_r;
    float wri_angle_d = wri_angle_r * (180.0 / M_PI);

 
    
    
    unsigned int bas_servopulse = bas_angle_d * (2000/180) +500     ;
    if (bas_servopulse < 500)
        bas_servopulse = 500 ;  // clamp
    if (bas_servopulse >2500)
        bas_servopulse = 2500 ; // clamp
        
        
    unsigned int shl_servopulse = 2500-(shl_angle_d*(2000/180))  ; 
    if (shl_servopulse < 500)
        shl_servopulse = 500 ;  //clamp
    if (shl_servopulse >2500)
        shl_servopulse = 2500 ; // clamp
  
    
    
    unsigned int elb_servopulse = 2500-(elb_angle_d*(2000/180))  ; 
    if (elb_servopulse < 500)
        elb_servopulse = 500 ; // clamp at 500 , this is where the LewanSoul LeArm differs from the reference model
    if (elb_servopulse >1500)
        elb_servopulse = 1500 ; // clamp at 1500 , this is where the LewanSoul LeArm differs from the reference model
        
        
    unsigned int wri_servopulse = 2500-(wri_angle_d*(2000/180))  ; 
    if (wri_servopulse < 500)
        wri_servopulse = 500 ;  // clamp
    if (wri_servopulse >2500)
        wri_servopulse = 2500 ; // clamp 
    

    // sperate servo pulse positions into lsb / msb (bytes)
  
    bas_low_byte  =  bas_servopulse & 0xff;
    bas_high_byte =  (unsigned char)(bas_servopulse >> 8);
    
    shl_low_byte  = shl_servopulse & 0xff;
    shl_high_byte = (unsigned char)(shl_servopulse >> 8);
    
    elb_low_byte  = elb_servopulse & 0xff;
    elb_high_byte = (unsigned char)(elb_servopulse >> 8);
    
    wri_low_byte  = wri_servopulse & 0xff;
    wri_high_byte = (unsigned char)(wri_servopulse >> 8);
    
   // Build the serial message command for the server controller serial interface 
    
    cmd_msg[0]= 0x55; //header
    cmd_msg[1]= 0x55; //header
    cmd_msg[2]= 0x11; //length from this byte to the last (17 decimal) 
    cmd_msg[3]= 0x03; //command (servo move)
    cmd_msg[4]= 0x04; //4 servos to move in a single command
    cmd_msg[5]= 0xfA; //lsb move time (ms)
    cmd_msg[6]= 0x00; //msb move time (ms)
    
    cmd_msg[7]= 0x03; //servo 3 (wrist)
    cmd_msg[8]= wri_low_byte; 
    cmd_msg[9]= wri_high_byte;
    
    cmd_msg[10]= 0x04; // servo 4 (elbow)
    cmd_msg[11]= elb_low_byte;
    cmd_msg[12]= elb_high_byte;
    
    cmd_msg[13]= 0x05; // servo 5 (shoulder)
    cmd_msg[14]= shl_low_byte;
    cmd_msg[15]= shl_high_byte;
    
    cmd_msg[16]= 0x06; // servo6 (base)
    cmd_msg[17]= bas_low_byte;
    cmd_msg[18]= bas_high_byte;
    
    cmd_msg[19]=0x00; // zero out 
    
    
    // send command string 19 bytes (2 header bytes, 17 payload)
    
    Serial1.write(cmd_msg,19);
    
    // send same to console for testing , write as ASCII HEX values
    
    for (i = 0; i <= 18 ; i++) {
        
        if (cmd_msg[i] < 0x10) 
        
           Serial.print(0x00) ;  // when hex value is 1 digit ... need a leading 0 for the MSB in the command string
         
        Serial.print(cmd_msg[i],HEX); // send ascii  hex representation of each message byte
        
        };
        
    Serial.println(" " ); // not required, for ease of reading
    
    // for debug, print values
 
       
      Serial.print("WRIST (3) DEG = " );
      Serial.print(wri_angle_d);
      Serial.print("   WRIST(3) Pulse = " );
      Serial.println(wri_servopulse );
      
      
      Serial.print("ELBOW (4)  DEG = " );
      Serial.print(elb_angle_d);
      Serial.print("   ELBOW (4) Pulse = " );
      Serial.println(elb_servopulse );
      
      
      
      Serial.print("SHOULDER (5) DEG = " );
      Serial.print(shl_angle_d);
      Serial.print("   SHOULDER (5) Pulse = " );
      Serial.println(shl_servopulse );
 
      Serial.print("Base (6) Pulse = " );
      Serial.println(bas_servopulse );
      
      Serial.println("====================" );
      
 
} 
 
/* move servos to parking position */
//void servo_park()
//{
//  servos.setposition( BAS_SERVO, 1715 );
//  servos.setposition( SHL_SERVO, 2100 );
//  servos.setposition( ELB_SERVO, 2100 );
//  servos.setposition( WRI_SERVO, 1800 );
//  servos.setposition( WRO_SERVO, 600 );
//  servos.setposition( GRI_SERVO, 900 );
//  return;
//}


 
void zero_x()
{
  for( double yaxis = 150.0; yaxis < 356.0; yaxis += 1 ) {
    set_arm( 0, yaxis, 127.0, 0 );
    delay( 10 );
  }
  for( double yaxis = 356.0; yaxis > 150.0; yaxis -= 1 ) {
    set_arm( 0, yaxis, 127.0, 0 );
    delay( 10 );
  }
}
 
/* moves arm in a straight line */
void line()
{
    for( double xaxis = -100.0; xaxis < 100.0; xaxis += 0.5 ) {
      set_arm( xaxis, 250, 100, 0 );
      delay( 10 );
    }
    for( float xaxis = 100.0; xaxis > -100.0; xaxis -= 0.5 ) {
      set_arm( xaxis, 250, 100, 0 );
      delay( 1000 );
    }
}

void rect()
{

  float xaxis, zaxis,yaxis;
  

      
      xaxis =  10 ;
      yaxis =  10 ;
      zaxis =  125 ;
      
      
      set_arm( xaxis, yaxis, zaxis, 90 );
      
      
      Serial.print("xaxis (MM) = " );
      Serial.print(xaxis);
      
     
      
      Serial.print("     yaxis (MM) = " );
      Serial.print(yaxis);
      
      Serial.print("    zaxis (MM) = " );
      Serial.println(zaxis);
      
      delay(125);
      
      Serial.println("====================" );

}
 
void circle()
{
  #define RADIUS 50.0
  //float angle = 0;
  float zaxis,yaxis;
  
  for( float angle = 0.0; angle < 180.0; angle += 9.0 ) {
      yaxis = RADIUS * sin( angle * M_PI / 180.0 ) ;
      zaxis = RADIUS * cos( angle * M_PI / 180.0 ) ;
      set_arm( 0, yaxis, zaxis, 0 );
      
      
      Serial.print("yaxis (MM) = " );
      Serial.print(yaxis);
      Serial.print("    zaxis (MM) = " );
      Serial.println(zaxis);
      delay(2000);
      
      Serial.println("====================" );
  }
}
